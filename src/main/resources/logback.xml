<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<!-- 上下文名称 -->
	<contextName>SpringBootDemo</contextName>
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%-4relative [%thread] %-5level %logger{35} - %msg %n
			</pattern>
			<!-- <charset>GBK</charset> -->
		</encoder>
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
		  <level>debug</level>
		</filter>
	</appender>
	<!-- 获取时间戳字符串 -->
	<timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss" />

	<appender name="FILE" class="ch.qos.logback.core.FileAppender">
		<file>${catalina.base}/logs/test/file-${bySecond}.log</file>
		<append>true</append>
		<encoder>
			<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
			<charset class="java.nio.charset.Charset">GBK</charset>
		</encoder>
	</appender>
	<!-- 滚动文件 -->
	<appender name="INFO"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${catalina.base}/logs/test/RollingFile-info.log</file>
		<!-- 当发生滚动时，决定RollingFileAppender的行为 TimeBasedRollingPolicy(根据时间来制定滚动策略) -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>logFile-info.%d{yyyy-MM-dd}.log</fileNamePattern>
			<!-- 控制保留的归档文件的最大数量，超出数量就删除旧文件 -->
			<maxHistory>30</maxHistory>
			<totalSizeCap>3GB</totalSizeCap>
		</rollingPolicy>
		<!-- 以上配置表示每天生成一个日志文件，保存30天的日志文件 -->
		<!--级别过滤器,根据日志级别进行过滤,如果日志级别等于配置级别,过滤器会根据onMath 和 onMismatch接收或拒绝日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>   <!-- 设置过滤级别 -->
			<!-- ACCEPT，日志会被立即处理，不再经过剩余过滤器 -->
			<onMatch>ACCEPT</onMatch>  <!-- 配置符合过滤条件的操作 -->
			<!-- DENY，日志将立即被抛弃不再经过其他过滤器 -->
			<onMismatch>DENY</onMismatch>  <!-- 配置不符合过滤条件的操作 -->
			<!-- NEUTRAL，有序列表里的下个过滤器过接着处理日志 -->
		</filter>
		<encoder>
			<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n
			</pattern>
		</encoder>
	</appender>
	<appender name="ERROR"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${catalina.base}/logs/test/RollingFile-error.log</file>
		<!-- 当发生滚动时，决定RollingFileAppender的行为 TimeBasedRollingPolicy(根据时间来制定滚动策略) -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>logFile-error.%d{yyyy-MM-dd}.log</fileNamePattern>
			<!-- 控制保留的归档文件的最大数量，超出数量就删除旧文件 -->
			<maxHistory>30</maxHistory>
			<totalSizeCap>3GB</totalSizeCap>
		</rollingPolicy>
		<!-- 以上配置表示每天生成一个日志文件，保存30天的日志文件 -->
		<!--级别过滤器,根据日志级别进行过滤,如果日志级别等于配置级别,过滤器会根据onMath 和 onMismatch接收或拒绝日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>   <!-- 设置过滤级别 -->
			<!-- ACCEPT，日志会被立即处理，不再经过剩余过滤器 -->
			<onMatch>ACCEPT</onMatch>  <!-- 配置符合过滤条件的操作 -->
			<!-- DENY，日志将立即被抛弃不再经过其他过滤器 -->
			<onMismatch>DENY</onMismatch>  <!-- 配置不符合过滤条件的操作 -->
			<!-- NEUTRAL，有序列表里的下个过滤器过接着处理日志 -->
		</filter>
		<encoder>
			<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n
			</pattern>
		</encoder>
	</appender>
	<appender name="DEBUG"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${catalina.base}/logs/test/RollingFile-debug.log</file>
		<!-- 当发生滚动时，决定RollingFileAppender的行为 TimeBasedRollingPolicy(根据时间来制定滚动策略) -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>logFile-debug.%d{yyyy-MM-dd}.log</fileNamePattern>
			<!-- 控制保留的归档文件的最大数量，超出数量就删除旧文件 -->
			<maxHistory>30</maxHistory>
			<totalSizeCap>3GB</totalSizeCap>
		</rollingPolicy>
		<!-- 以上配置表示每天生成一个日志文件，保存30天的日志文件 -->
		<!--级别过滤器,根据日志级别进行过滤,如果日志级别等于配置级别,过滤器会根据onMath 和 onMismatch接收或拒绝日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>   <!-- 设置过滤级别 -->
			<!-- ACCEPT，日志会被立即处理，不再经过剩余过滤器 -->
			<onMatch>ACCEPT</onMatch>  <!-- 配置符合过滤条件的操作 -->
			<!-- DENY，日志将立即被抛弃不再经过其他过滤器 -->
			<onMismatch>DENY</onMismatch>  <!-- 配置不符合过滤条件的操作 -->
			<!-- NEUTRAL，有序列表里的下个过滤器过接着处理日志 -->
		</filter>
		<encoder>
			<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n
			</pattern>
		</encoder>
	</appender>
	<!--  additivity="false" 日志不往上层抛出导致日志膨胀,这儿记录了,控制台就不在输出-->
	<root level="debug">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="INFO" />
		<appender-ref ref="ERROR" />
		<appender-ref ref="DEBUG" />
		<appender-ref ref="FILE" />
	</root>
</configuration>